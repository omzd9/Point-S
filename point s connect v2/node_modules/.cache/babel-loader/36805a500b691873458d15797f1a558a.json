{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ZDLaP\\\\Desktop\\\\ReactProject\\\\connect\\\\point s connect v2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\ZDLaP\\\\Desktop\\\\ReactProject\\\\connect\\\\point s connect v2\\\\src\\\\views\\\\addAccount.jsx\";\nimport React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../util/APIUtils';\nimport '../assets/css/Signup.css';\nimport { Link } from 'react-router-dom';\nimport { NAME_MIN_LENGTH, NAME_MAX_LENGTH, USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH, PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH } from '../constants';\nimport { Form, Input, Button, notification, Select } from 'antd';\nconst FormItem = Form.Item;\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validateFranchise = value => {};\n\n    this.validateName = name => {\n      if (name.length < NAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Name is too short (Minimum \".concat(NAME_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (name.length > NAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: \"Name is too long (Maximum \".concat(NAME_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validateEmail = email => {\n      if (!email) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email may not be empty'\n        };\n      }\n\n      const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n\n      if (!EMAIL_REGEX.test(email)) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email not valid'\n        };\n      }\n\n      if (email.length > EMAIL_MAX_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Email is too long (Maximum \".concat(EMAIL_MAX_LENGTH, \" characters allowed)\")\n        };\n      }\n\n      return {\n        validateStatus: null,\n        errorMsg: null\n      };\n    };\n\n    this.validateUsername = username => {\n      if (username.length < USERNAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Username is too short (Minimum \".concat(USERNAME_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (username.length > USERNAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: \"Username is too long (Maximum \".concat(USERNAME_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: null,\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validatePassword = password => {\n      if (password.length < PASSWORD_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Password is too short (Minimum \".concat(PASSWORD_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (password.length > PASSWORD_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: \"Password is too long (Maximum \".concat(PASSWORD_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.state = {\n      name: {\n        value: ''\n      },\n      username: {\n        value: ''\n      },\n      email: {\n        value: ''\n      },\n      password: {\n        value: ''\n      },\n      role: {\n        value: ''\n      },\n      franchise: {\n        ville: '',\n        fonction: ''\n      },\n      Gcompte: {\n        societe: '',\n        fonction: ''\n      }\n    };\n    const Option = Select.Option;\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n    this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n    this.isFormInvalid = this.isFormInvalid.bind(this);\n  }\n\n  renderElementSupplementaire(role) {\n    if (role === 'FranchisÃ©') {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(FormItem, {\n        label: \"Ville\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"ville\",\n        autoComplete: \"off\",\n        placeholder: \"ex: Casablanca\",\n        value: this.state.franchise.ville,\n        onChange: event => this.handleInputChange(event, this.validateFranchise),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })), React.createElement(FormItem, {\n        label: \"Fonction\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"fonction\",\n        autoComplete: \"off\",\n        placeholder: \"ex: responsable marketing\",\n        value: this.state.franchise.fonction,\n        onChange: event => this.handleInputChange(event, this.validateFranchise),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })));\n    }\n\n    if (role === 'G.compte') {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(FormItem, {\n        label: \"Societe\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"societe\",\n        autoComplete: \"off\",\n        placeholder: \"ex: IAM\",\n        value: this.state.franchise.ville,\n        onChange: event => this.handleInputChange(event, this.validateFranchise),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })), React.createElement(FormItem, {\n        label: \"Fonction\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"fonction\",\n        autoComplete: \"off\",\n        placeholder: \"ex: responsable marketing\",\n        value: this.state.franchise.fonction,\n        onChange: event => this.handleInputChange(event, this.validateFranchise),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })));\n    }\n  }\n\n  handleInputChange(event, validationFun) {\n    const target = event.target;\n    const inputName = target.name;\n    const inputValue = target.value;\n    this.setState({\n      [inputName]: _objectSpread({\n        value: inputValue\n      }, validationFun(inputValue))\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const createAccountRequest = {\n      name: this.state.name.value,\n      email: this.state.email.value,\n      username: this.state.username.value,\n      password: this.state.password.value,\n      role: this.state.role.value\n    };\n    /*signup(signupRequest)\r\n    .then(response => {\r\n        notification.success({\r\n            message: 'Polling App',\r\n            description: \"Thank you! Account has been created successfully !\",\r\n        });          \r\n        this.props.history.push(\"/login\");\r\n    }).catch(error => {\r\n        notification.error({\r\n            message: 'Polling App',\r\n            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n        });\r\n    });*/\n  }\n\n  isFormInvalid() {\n    return !(this.state.name.validateStatus === 'success' && this.state.username.validateStatus === 'success' && this.state.email.validateStatus === 'success' && this.state.password.validateStatus === 'success' && this.state.role.validateStatus === 'success');\n  }\n\n  onChangeSelect(value) {\n    this.setState({\n      'role': {\n        'value': value,\n        'validateStatus': 'success',\n        'errorMsg': null\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"signup-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Creation d'un compte :\"), React.createElement(\"div\", {\n      className: \"signup-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"signup-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      label: \"Full Name\",\n      validateStatus: this.state.name.validateStatus,\n      help: this.state.name.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"name\",\n      autoComplete: \"off\",\n      placeholder: \"Full name\",\n      value: this.state.name.value,\n      onChange: event => this.handleInputChange(event, this.validateName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Username\",\n      hasFeedback: true,\n      validateStatus: this.state.username.validateStatus,\n      help: this.state.username.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"username\",\n      autoComplete: \"off\",\n      placeholder: \"A unique username\",\n      value: this.state.username.value,\n      onBlur: this.validateUsernameAvailability,\n      onChange: event => this.handleInputChange(event, this.validateUsername),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Email\",\n      hasFeedback: true,\n      validateStatus: this.state.email.validateStatus,\n      help: this.state.email.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"email\",\n      type: \"email\",\n      autoComplete: \"off\",\n      placeholder: \"Your email\",\n      value: this.state.email.value,\n      onBlur: this.validateEmailAvailability,\n      onChange: event => this.handleInputChange(event, this.validateEmail),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Password\",\n      validateStatus: this.state.password.validateStatus,\n      help: this.state.password.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"password\",\n      type: \"password\",\n      autoComplete: \"off\",\n      placeholder: \"A password between 6 to 20 characters\",\n      value: this.state.password.value,\n      onChange: event => this.handleInputChange(event, this.validatePassword),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Role\",\n      validateStatus: this.state.role.validateStatus,\n      help: this.state.role.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(Select, {\n      showSearch: true,\n      style: {\n        width: 200\n      },\n      placeholder: \"Select a person\",\n      optionFilterProp: \"children\",\n      onChange: this.onChangeSelect,\n      filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"PSD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, \"Jack\"), React.createElement(Option, {\n      value: \"Franchis\\xE9\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, \"Lucy\"), React.createElement(Option, {\n      value: \"G.compte\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, \"Tom\"))), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      size: \"large\",\n      className: \"signup-form-button\",\n      disabled: this.isFormInvalid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"Creation de compte\")))));\n  } // Validation Functions\n\n\n  validateUsernameAvailability() {\n    // First check for client side errors in username\n    const usernameValue = this.state.username.value;\n    const usernameValidation = this.validateUsername(usernameValue);\n\n    if (usernameValidation.validateStatus === 'error') {\n      this.setState({\n        username: _objectSpread({\n          value: usernameValue\n        }, usernameValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      username: {\n        value: usernameValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkUsernameAvailability(usernameValue).then(response => {\n      if (response.available) {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'error',\n            errorMsg: 'This username is already taken'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        username: {\n          value: usernameValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n  validateEmailAvailability() {\n    // First check for client side errors in email\n    const emailValue = this.state.email.value;\n    const emailValidation = this.validateEmail(emailValue);\n\n    if (emailValidation.validateStatus === 'error') {\n      this.setState({\n        email: _objectSpread({\n          value: emailValue\n        }, emailValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      email: {\n        value: emailValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkEmailAvailability(emailValue).then(response => {\n      if (response.available) {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'error',\n            errorMsg: 'This Email is already registered'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        email: {\n          value: emailValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["C:\\Users\\ZDLaP\\Desktop\\ReactProject\\connect\\point s connect v2\\src\\views\\addAccount.jsx"],"names":["React","Component","signup","checkUsernameAvailability","checkEmailAvailability","Link","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","Form","Input","Button","notification","Select","FormItem","Item","Signup","constructor","props","validateFranchise","value","validateName","name","length","validateStatus","errorMsg","validationStatus","validateEmail","email","EMAIL_REGEX","RegExp","test","validateUsername","username","validatePassword","password","state","role","franchise","ville","fonction","Gcompte","societe","Option","handleInputChange","bind","handleSubmit","validateUsernameAvailability","validateEmailAvailability","isFormInvalid","renderElementSupplementaire","event","validationFun","target","inputName","inputValue","setState","preventDefault","createAccountRequest","onChangeSelect","render","width","input","option","children","toLowerCase","indexOf","usernameValue","usernameValidation","then","response","available","catch","error","emailValue","emailValidation"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,yBAAjB,EAA4CC,sBAA5C,QAA0E,kBAA1E;AACA,OAAO,0BAAP;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,SACIC,eADJ,EACqBC,eADrB,EAEIC,mBAFJ,EAEyBC,mBAFzB,EAGIC,gBAHJ,EAIIC,mBAJJ,EAIyBC,mBAJzB,QAKO,cALP;AAOA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,YAA9B,EAA2CC,MAA3C,QAAyD,MAAzD;AACA,MAAMC,QAAQ,GAAGL,IAAI,CAACM,IAAtB;;AAGA,MAAMC,MAAN,SAAqBnB,SAArB,CAA+B;AAC3BoB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SA0PnBC,iBA1PmB,GA0PAC,KAAD,IAAS,CAE1B,CA5PkB;;AAAA,SA6PnBC,YA7PmB,GA6PHC,IAAD,IAAU;AACrB,UAAGA,IAAI,CAACC,MAAL,GAAcrB,eAAjB,EAAkC;AAC9B,eAAO;AACHsB,UAAAA,cAAc,EAAE,OADb;AAEHC,UAAAA,QAAQ,uCAAgCvB,eAAhC;AAFL,SAAP;AAIH,OALD,MAKO,IAAIoB,IAAI,CAACC,MAAL,GAAcpB,eAAlB,EAAmC;AACtC,eAAO;AACHuB,UAAAA,gBAAgB,EAAE,OADf;AAEHD,UAAAA,QAAQ,sCAA+BtB,eAA/B;AAFL,SAAP;AAIH,OALM,MAKA;AACH,eAAO;AACHqB,UAAAA,cAAc,EAAE,SADb;AAEHC,UAAAA,QAAQ,EAAE;AAFP,SAAP;AAIH;AACJ,KA9QkB;;AAAA,SAgRnBE,aAhRmB,GAgRFC,KAAD,IAAW;AACvB,UAAG,CAACA,KAAJ,EAAW;AACP,eAAO;AACHJ,UAAAA,cAAc,EAAE,OADb;AAEHC,UAAAA,QAAQ,EAAE;AAFP,SAAP;AAIH;;AAED,YAAMI,WAAW,GAAGC,MAAM,CAAC,wBAAD,CAA1B;;AACA,UAAG,CAACD,WAAW,CAACE,IAAZ,CAAiBH,KAAjB,CAAJ,EAA6B;AACzB,eAAO;AACHJ,UAAAA,cAAc,EAAE,OADb;AAEHC,UAAAA,QAAQ,EAAE;AAFP,SAAP;AAIH;;AAED,UAAGG,KAAK,CAACL,MAAN,GAAejB,gBAAlB,EAAoC;AAChC,eAAO;AACHkB,UAAAA,cAAc,EAAE,OADb;AAEHC,UAAAA,QAAQ,uCAAgCnB,gBAAhC;AAFL,SAAP;AAIH;;AAED,aAAO;AACHkB,QAAAA,cAAc,EAAE,IADb;AAEHC,QAAAA,QAAQ,EAAE;AAFP,OAAP;AAIH,KA3SkB;;AAAA,SA6SnBO,gBA7SmB,GA6SCC,QAAD,IAAc;AAC7B,UAAGA,QAAQ,CAACV,MAAT,GAAkBnB,mBAArB,EAA0C;AACtC,eAAO;AACHoB,UAAAA,cAAc,EAAE,OADb;AAEHC,UAAAA,QAAQ,2CAAoCrB,mBAApC;AAFL,SAAP;AAIH,OALD,MAKO,IAAI6B,QAAQ,CAACV,MAAT,GAAkBlB,mBAAtB,EAA2C;AAC9C,eAAO;AACHqB,UAAAA,gBAAgB,EAAE,OADf;AAEHD,UAAAA,QAAQ,0CAAmCpB,mBAAnC;AAFL,SAAP;AAIH,OALM,MAKA;AACH,eAAO;AACHmB,UAAAA,cAAc,EAAE,IADb;AAEHC,UAAAA,QAAQ,EAAE;AAFP,SAAP;AAIH;AACJ,KA9TkB;;AAAA,SA4anBS,gBA5amB,GA4aCC,QAAD,IAAc;AAC7B,UAAGA,QAAQ,CAACZ,MAAT,GAAkBhB,mBAArB,EAA0C;AACtC,eAAO;AACHiB,UAAAA,cAAc,EAAE,OADb;AAEHC,UAAAA,QAAQ,2CAAoClB,mBAApC;AAFL,SAAP;AAIH,OALD,MAKO,IAAI4B,QAAQ,CAACZ,MAAT,GAAkBf,mBAAtB,EAA2C;AAC9C,eAAO;AACHkB,UAAAA,gBAAgB,EAAE,OADf;AAEHD,UAAAA,QAAQ,0CAAmCjB,mBAAnC;AAFL,SAAP;AAIH,OALM,MAKA;AACH,eAAO;AACHgB,UAAAA,cAAc,EAAE,SADb;AAEHC,UAAAA,QAAQ,EAAE;AAFP,SAAP;AAIH;AACJ,KA7bkB;;AAEf,SAAKW,KAAL,GAAa;AACTd,MAAAA,IAAI,EAAE;AACFF,QAAAA,KAAK,EAAE;AADL,OADG;AAITa,MAAAA,QAAQ,EAAE;AACNb,QAAAA,KAAK,EAAE;AADD,OAJD;AAOTQ,MAAAA,KAAK,EAAE;AACHR,QAAAA,KAAK,EAAE;AADJ,OAPE;AAUTe,MAAAA,QAAQ,EAAE;AACNf,QAAAA,KAAK,EAAE;AADD,OAVD;AAaTiB,MAAAA,IAAI,EAAC;AACDjB,QAAAA,KAAK,EAAC;AADL,OAbI;AAiBTkB,MAAAA,SAAS,EAAC;AACFC,QAAAA,KAAK,EAAC,EADJ;AAEFC,QAAAA,QAAQ,EAAC;AAFP,OAjBD;AAqBTC,MAAAA,OAAO,EAAC;AACJC,QAAAA,OAAO,EAAC,EADJ;AAEJF,QAAAA,QAAQ,EAAC;AAFL;AArBC,KAAb;AAFe,UA6BPG,MA7BO,GA6BI9B,MA7BJ,CA6BP8B,MA7BO;AA8Bf,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,4BAAL,GAAoC,KAAKA,4BAAL,CAAkCF,IAAlC,CAAuC,IAAvC,CAApC;AACA,SAAKG,yBAAL,GAAiC,KAAKA,yBAAL,CAA+BH,IAA/B,CAAoC,IAApC,CAAjC;AACA,SAAKI,aAAL,GAAqB,KAAKA,aAAL,CAAmBJ,IAAnB,CAAwB,IAAxB,CAArB;AACH;;AACFK,EAAAA,2BAA2B,CAACb,IAAD,EAC1B;AACI,QAAGA,IAAI,KAAG,WAAV,EACA;AACI,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGY,oBAAC,KAAD;AACQ,QAAA,IAAI,EAAC,OADb;AAEQ,QAAA,IAAI,EAAC,OAFb;AAGQ,QAAA,YAAY,EAAC,KAHrB;AAIQ,QAAA,WAAW,EAAC,gBAJpB;AAKQ,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,SAAX,CAAqBC,KALpC;AAMQ,QAAA,QAAQ,EAAGY,KAAD,IAAW,KAAKP,iBAAL,CAAuBO,KAAvB,EAA8B,KAAKhC,iBAAnC,CAN7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHZ,CADJ,EAYI,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,IAAI,EAAC,UAFT;AAGI,QAAA,YAAY,EAAC,KAHjB;AAII,QAAA,WAAW,EAAC,2BAJhB;AAKI,QAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWE,SAAX,CAAqBE,QALhC;AAMI,QAAA,QAAQ,EAAGW,KAAD,IAAW,KAAKP,iBAAL,CAAuBO,KAAvB,EAA8B,KAAKhC,iBAAnC,CANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CAZJ,CADA;AA0BH;;AACD,QAAGkB,IAAI,KAAI,UAAX,EACA;AACI,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGgB,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,IAAI,EAAC,SAFT;AAGI,QAAA,YAAY,EAAC,KAHjB;AAII,QAAA,WAAW,EAAC,SAJhB;AAKI,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,SAAX,CAAqBC,KALhC;AAMI,QAAA,QAAQ,EAAGY,KAAD,IAAW,KAAKP,iBAAL,CAAuBO,KAAvB,EAA8B,KAAKhC,iBAAnC,CANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHhB,CADA,EAYA,oBAAC,QAAD;AAAU,QAAA,KAAK,EAAC,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA,oBAAC,KAAD;AACI,QAAA,IAAI,EAAC,OADT;AAEI,QAAA,IAAI,EAAC,UAFT;AAGI,QAAA,YAAY,EAAC,KAHjB;AAII,QAAA,WAAW,EAAC,2BAJhB;AAKI,QAAA,KAAK,EAAE,KAAKiB,KAAL,CAAWE,SAAX,CAAqBE,QALhC;AAMI,QAAA,QAAQ,EAAGW,KAAD,IAAW,KAAKP,iBAAL,CAAuBO,KAAvB,EAA8B,KAAKhC,iBAAnC,CANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,CAZA,CADJ;AAyBC;AAGR;;AACDyB,EAAAA,iBAAiB,CAACO,KAAD,EAAQC,aAAR,EAAuB;AACpC,UAAMC,MAAM,GAAGF,KAAK,CAACE,MAArB;AACA,UAAMC,SAAS,GAAGD,MAAM,CAAC/B,IAAzB;AACA,UAAMiC,UAAU,GAAGF,MAAM,CAACjC,KAA1B;AAEA,SAAKoC,QAAL,CAAc;AACV,OAACF,SAAD;AACIlC,QAAAA,KAAK,EAAEmC;AADX,SAEOH,aAAa,CAACG,UAAD,CAFpB;AADU,KAAd;AAMH;;AAEDT,EAAAA,YAAY,CAACK,KAAD,EAAQ;AAChBA,IAAAA,KAAK,CAACM,cAAN;AAEA,UAAMC,oBAAoB,GAAG;AACzBpC,MAAAA,IAAI,EAAE,KAAKc,KAAL,CAAWd,IAAX,CAAgBF,KADG;AAEzBQ,MAAAA,KAAK,EAAE,KAAKQ,KAAL,CAAWR,KAAX,CAAiBR,KAFC;AAGzBa,MAAAA,QAAQ,EAAE,KAAKG,KAAL,CAAWH,QAAX,CAAoBb,KAHL;AAIzBe,MAAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWD,QAAX,CAAoBf,KAJL;AAKzBiB,MAAAA,IAAI,EAAG,KAAKD,KAAL,CAAWC,IAAX,CAAgBjB;AALE,KAA7B;AAOA;;;;;;;;;;;;;AAaH;;AAED6B,EAAAA,aAAa,GAAG;AACZ,WAAO,EAAE,KAAKb,KAAL,CAAWd,IAAX,CAAgBE,cAAhB,KAAmC,SAAnC,IACL,KAAKY,KAAL,CAAWH,QAAX,CAAoBT,cAApB,KAAuC,SADlC,IAEL,KAAKY,KAAL,CAAWR,KAAX,CAAiBJ,cAAjB,KAAoC,SAF/B,IAGL,KAAKY,KAAL,CAAWD,QAAX,CAAoBX,cAApB,KAAuC,SAHlC,IAIL,KAAKY,KAAL,CAAWC,IAAX,CAAgBb,cAAhB,KAAmC,SAJhC,CAAP;AAMH;;AACDmC,EAAAA,cAAc,CAACvC,KAAD,EAAQ;AAElB,SAAKoC,QAAL,CAAc;AACV,cAAS;AACL,iBAASpC,KADJ;AAEL,0BAAkB,SAFb;AAGL,oBAAY;AAHP;AADC,KAAd;AAQD;;AAGHwC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADJ,EAEI;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAKd,YAArB;AAAmC,MAAA,SAAS,EAAC,aAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACI,MAAA,KAAK,EAAC,WADV;AAEI,MAAA,cAAc,EAAE,KAAKV,KAAL,CAAWd,IAAX,CAAgBE,cAFpC;AAGI,MAAA,IAAI,EAAE,KAAKY,KAAL,CAAWd,IAAX,CAAgBG,QAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,KAAD;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,IAAI,EAAC,MAFT;AAGI,MAAA,YAAY,EAAC,KAHjB;AAII,MAAA,WAAW,EAAC,WAJhB;AAKI,MAAA,KAAK,EAAE,KAAKW,KAAL,CAAWd,IAAX,CAAgBF,KAL3B;AAMI,MAAA,QAAQ,EAAG+B,KAAD,IAAW,KAAKP,iBAAL,CAAuBO,KAAvB,EAA8B,KAAK9B,YAAnC,CANzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CADJ,EAaI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAC,UAAhB;AACI,MAAA,WAAW,MADf;AAEI,MAAA,cAAc,EAAE,KAAKe,KAAL,CAAWH,QAAX,CAAoBT,cAFxC;AAGI,MAAA,IAAI,EAAE,KAAKY,KAAL,CAAWH,QAAX,CAAoBR,QAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,KAAD;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,IAAI,EAAC,UAFT;AAGI,MAAA,YAAY,EAAC,KAHjB;AAII,MAAA,WAAW,EAAC,mBAJhB;AAKI,MAAA,KAAK,EAAE,KAAKW,KAAL,CAAWH,QAAX,CAAoBb,KAL/B;AAMI,MAAA,MAAM,EAAE,KAAK2B,4BANjB;AAOI,MAAA,QAAQ,EAAGI,KAAD,IAAW,KAAKP,iBAAL,CAAuBO,KAAvB,EAA8B,KAAKnB,gBAAnC,CAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAbJ,EA0BI,oBAAC,QAAD;AACI,MAAA,KAAK,EAAC,OADV;AAEI,MAAA,WAAW,MAFf;AAGI,MAAA,cAAc,EAAE,KAAKI,KAAL,CAAWR,KAAX,CAAiBJ,cAHrC;AAII,MAAA,IAAI,EAAE,KAAKY,KAAL,CAAWR,KAAX,CAAiBH,QAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKI,oBAAC,KAAD;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,IAAI,EAAC,OAHT;AAII,MAAA,YAAY,EAAC,KAJjB;AAKI,MAAA,WAAW,EAAC,YALhB;AAMI,MAAA,KAAK,EAAE,KAAKW,KAAL,CAAWR,KAAX,CAAiBR,KAN5B;AAOI,MAAA,MAAM,EAAE,KAAK4B,yBAPjB;AAQI,MAAA,QAAQ,EAAGG,KAAD,IAAW,KAAKP,iBAAL,CAAuBO,KAAvB,EAA8B,KAAKxB,aAAnC,CARzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CA1BJ,EAyCI,oBAAC,QAAD;AACI,MAAA,KAAK,EAAC,UADV;AAEI,MAAA,cAAc,EAAE,KAAKS,KAAL,CAAWD,QAAX,CAAoBX,cAFxC;AAGI,MAAA,IAAI,EAAE,KAAKY,KAAL,CAAWD,QAAX,CAAoBV,QAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII,oBAAC,KAAD;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,IAAI,EAAC,UAFT;AAGI,MAAA,IAAI,EAAC,UAHT;AAII,MAAA,YAAY,EAAC,KAJjB;AAKI,MAAA,WAAW,EAAC,uCALhB;AAMI,MAAA,KAAK,EAAE,KAAKW,KAAL,CAAWD,QAAX,CAAoBf,KAN/B;AAOI,MAAA,QAAQ,EAAG+B,KAAD,IAAW,KAAKP,iBAAL,CAAuBO,KAAvB,EAA8B,KAAKjB,gBAAnC,CAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,CAzCJ,EAsDM,oBAAC,QAAD;AACE,MAAA,KAAK,EAAC,MADR;AAEE,MAAA,cAAc,EAAE,KAAKE,KAAL,CAAWC,IAAX,CAAgBb,cAFlC;AAGE,MAAA,IAAI,EAAE,KAAKY,KAAL,CAAWC,IAAX,CAAgBZ,QAHxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIC,oBAAC,MAAD;AACC,MAAA,UAAU,MADX;AAEC,MAAA,KAAK,EAAE;AAAEoC,QAAAA,KAAK,EAAE;AAAT,OAFR;AAGC,MAAA,WAAW,EAAC,iBAHb;AAIC,MAAA,gBAAgB,EAAC,UAJlB;AAKC,MAAA,QAAQ,EAAE,KAAKF,cALhB;AAMC,MAAA,YAAY,EAAE,CAACG,KAAD,EAAQC,MAAR,KACdA,MAAM,CAAC7C,KAAP,CAAa8C,QAAb,CAAsBC,WAAtB,GAAoCC,OAApC,CAA4CJ,KAAK,CAACG,WAAN,EAA5C,KAAoE,CAPrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVD,EAWC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAXD,EAYC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAZD,CAJD,CAtDN,EAyEI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,SAAb;AACI,MAAA,QAAQ,EAAC,QADb;AAEI,MAAA,IAAI,EAAC,OAFT;AAGI,MAAA,SAAS,EAAC,oBAHd;AAII,MAAA,QAAQ,EAAE,KAAKhB,aAAL,EAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADJ,CAzEJ,CADJ,CAFJ,CADJ;AAyFH,GAxP0B,CA0P3B;;;AAuEAF,EAAAA,4BAA4B,GAAG;AAC3B;AACA,UAAMoB,aAAa,GAAG,KAAK/B,KAAL,CAAWH,QAAX,CAAoBb,KAA1C;AACA,UAAMgD,kBAAkB,GAAG,KAAKpC,gBAAL,CAAsBmC,aAAtB,CAA3B;;AAEA,QAAGC,kBAAkB,CAAC5C,cAAnB,KAAsC,OAAzC,EAAkD;AAC9C,WAAKgC,QAAL,CAAc;AACVvB,QAAAA,QAAQ;AACJb,UAAAA,KAAK,EAAE+C;AADH,WAEDC,kBAFC;AADE,OAAd;AAMA;AACH;;AAED,SAAKZ,QAAL,CAAc;AACVvB,MAAAA,QAAQ,EAAE;AACNb,QAAAA,KAAK,EAAE+C,aADD;AAEN3C,QAAAA,cAAc,EAAE,YAFV;AAGNC,QAAAA,QAAQ,EAAE;AAHJ;AADA,KAAd;AAQA1B,IAAAA,yBAAyB,CAACoE,aAAD,CAAzB,CACCE,IADD,CACMC,QAAQ,IAAI;AACd,UAAGA,QAAQ,CAACC,SAAZ,EAAuB;AACnB,aAAKf,QAAL,CAAc;AACVvB,UAAAA,QAAQ,EAAE;AACNb,YAAAA,KAAK,EAAE+C,aADD;AAEN3C,YAAAA,cAAc,EAAE,SAFV;AAGNC,YAAAA,QAAQ,EAAE;AAHJ;AADA,SAAd;AAOH,OARD,MAQO;AACH,aAAK+B,QAAL,CAAc;AACVvB,UAAAA,QAAQ,EAAE;AACNb,YAAAA,KAAK,EAAE+C,aADD;AAEN3C,YAAAA,cAAc,EAAE,OAFV;AAGNC,YAAAA,QAAQ,EAAE;AAHJ;AADA,SAAd;AAOH;AACJ,KAnBD,EAmBG+C,KAnBH,CAmBSC,KAAK,IAAI;AACd;AACA,WAAKjB,QAAL,CAAc;AACVvB,QAAAA,QAAQ,EAAE;AACNb,UAAAA,KAAK,EAAE+C,aADD;AAEN3C,UAAAA,cAAc,EAAE,SAFV;AAGNC,UAAAA,QAAQ,EAAE;AAHJ;AADA,OAAd;AAOH,KA5BD;AA6BH;;AAEDuB,EAAAA,yBAAyB,GAAG;AACxB;AACA,UAAM0B,UAAU,GAAG,KAAKtC,KAAL,CAAWR,KAAX,CAAiBR,KAApC;AACA,UAAMuD,eAAe,GAAG,KAAKhD,aAAL,CAAmB+C,UAAnB,CAAxB;;AAEA,QAAGC,eAAe,CAACnD,cAAhB,KAAmC,OAAtC,EAA+C;AAC3C,WAAKgC,QAAL,CAAc;AACV5B,QAAAA,KAAK;AACDR,UAAAA,KAAK,EAAEsD;AADN,WAEEC,eAFF;AADK,OAAd;AAMA;AACH;;AAED,SAAKnB,QAAL,CAAc;AACV5B,MAAAA,KAAK,EAAE;AACHR,QAAAA,KAAK,EAAEsD,UADJ;AAEHlD,QAAAA,cAAc,EAAE,YAFb;AAGHC,QAAAA,QAAQ,EAAE;AAHP;AADG,KAAd;AAQAzB,IAAAA,sBAAsB,CAAC0E,UAAD,CAAtB,CACCL,IADD,CACMC,QAAQ,IAAI;AACd,UAAGA,QAAQ,CAACC,SAAZ,EAAuB;AACnB,aAAKf,QAAL,CAAc;AACV5B,UAAAA,KAAK,EAAE;AACHR,YAAAA,KAAK,EAAEsD,UADJ;AAEHlD,YAAAA,cAAc,EAAE,SAFb;AAGHC,YAAAA,QAAQ,EAAE;AAHP;AADG,SAAd;AAOH,OARD,MAQO;AACH,aAAK+B,QAAL,CAAc;AACV5B,UAAAA,KAAK,EAAE;AACHR,YAAAA,KAAK,EAAEsD,UADJ;AAEHlD,YAAAA,cAAc,EAAE,OAFb;AAGHC,YAAAA,QAAQ,EAAE;AAHP;AADG,SAAd;AAOH;AACJ,KAnBD,EAmBG+C,KAnBH,CAmBSC,KAAK,IAAI;AACd;AACA,WAAKjB,QAAL,CAAc;AACV5B,QAAAA,KAAK,EAAE;AACHR,UAAAA,KAAK,EAAEsD,UADJ;AAEHlD,UAAAA,cAAc,EAAE,SAFb;AAGHC,UAAAA,QAAQ,EAAE;AAHP;AADG,OAAd;AAOH,KA5BD;AA6BH;;AA3a0B;;AAkc/B,eAAeT,MAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../util/APIUtils';\r\nimport '../assets/css/Signup.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../constants';\r\n\r\nimport { Form, Input, Button, notification,Select } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\n\r\nclass Signup extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: ''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            },\r\n            role:{\r\n                value:'',\r\n                \r\n            },\r\n            franchise:{\r\n                    ville:'',\r\n                    fonction:''\r\n            },\r\n            Gcompte:{\r\n                societe:'',\r\n                fonction:'',\r\n\r\n            }\r\n        }\r\n        const { Option } = Select;\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\r\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n   renderElementSupplementaire(role)\r\n    {\r\n        if(role==='FranchisÃ©')\r\n        {\r\n            return(\r\n            <div>\r\n                <FormItem label=\"Ville\">\r\n                             \r\n                                \r\n                            <Input \r\n                                    size=\"large\"\r\n                                    name=\"ville\" \r\n                                    autoComplete=\"off\"\r\n                                    placeholder=\"ex: Casablanca\"\r\n                                    value={this.state.franchise.ville} \r\n                                    onChange={(event) => this.handleInputChange(event, this.validateFranchise)} />    \r\n               </FormItem>\r\n                <FormItem label=\"Fonction\">\r\n                \r\n                <Input \r\n                    size=\"large\"\r\n                    name=\"fonction\" \r\n                    autoComplete=\"off\"\r\n                    placeholder=\"ex: responsable marketing\"\r\n                    value={this.state.franchise.fonction} \r\n                    onChange={(event) => this.handleInputChange(event, this.validateFranchise)} />    \r\n                </FormItem>\r\n            </div>\r\n            )\r\n\r\n        }\r\n        if(role ==='G.compte')\r\n        {\r\n            return(\r\n                <div>\r\n                <FormItem label=\"Societe\">\r\n                             \r\n                                \r\n                                <Input \r\n                                    size=\"large\"\r\n                                    name=\"societe\" \r\n                                    autoComplete=\"off\"\r\n                                    placeholder=\"ex: IAM\"\r\n                                    value={this.state.franchise.ville} \r\n                                    onChange={(event) => this.handleInputChange(event, this.validateFranchise)} />    \r\n               </FormItem>\r\n                <FormItem label=\"Fonction\">\r\n                \r\n                <Input \r\n                    size=\"large\"\r\n                    name=\"fonction\" \r\n                    autoComplete=\"off\"\r\n                    placeholder=\"ex: responsable marketing\"\r\n                    value={this.state.franchise.fonction} \r\n                    onChange={(event) => this.handleInputChange(event, this.validateFranchise)} />    \r\n                </FormItem>\r\n                </div>\r\n            );\r\n            }\r\n\r\n        \r\n    }\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n    \r\n        const createAccountRequest = {\r\n            name: this.state.name.value,\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value,\r\n            role : this.state.role.value,\r\n        };\r\n        /*signup(signupRequest)\r\n        .then(response => {\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: \"Thank you! Account has been created successfully !\",\r\n            });          \r\n            this.props.history.push(\"/login\");\r\n        }).catch(error => {\r\n            notification.error({\r\n                message: 'Polling App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        });*/\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.name.validateStatus === 'success' &&\r\n            this.state.username.validateStatus === 'success' &&\r\n            this.state.email.validateStatus === 'success' &&\r\n            this.state.password.validateStatus === 'success' &&\r\n            this.state.role.validateStatus === 'success'\r\n        );\r\n    }\r\n    onChangeSelect(value) {\r\n       \r\n        this.setState({\r\n            'role' : {\r\n                'value': value,\r\n                'validateStatus': 'success',\r\n                'errorMsg': null,\r\n                \r\n            }\r\n        });\r\n      }\r\n      \r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h1 className=\"page-title\">Creation d'un compte :</h1>\r\n                <div className=\"signup-content\">\r\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem \r\n                            label=\"Full Name\"\r\n                            validateStatus={this.state.name.validateStatus}\r\n                            help={this.state.name.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"name\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Full name\"\r\n                                value={this.state.name.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />    \r\n                        </FormItem>\r\n                        <FormItem label=\"Username\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.username.validateStatus}\r\n                            help={this.state.username.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"username\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A unique username\"\r\n                                value={this.state.username.value} \r\n                                onBlur={this.validateUsernameAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Email\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.email.validateStatus}\r\n                            help={this.state.email.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"email\" \r\n                                type=\"email\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your email\"\r\n                                value={this.state.email.value} \r\n                                onBlur={this.validateEmailAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Password\"\r\n                            validateStatus={this.state.password.validateStatus}\r\n                            help={this.state.password.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"password\" \r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A password between 6 to 20 characters\" \r\n                                value={this.state.password.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />  \r\n                        </FormItem>\r\n                          <FormItem \r\n                            label=\"Role\"\r\n                            validateStatus={this.state.role.validateStatus}\r\n                            help={this.state.role.errorMsg}>\r\n                           <Select\r\n                            showSearch\r\n                            style={{ width: 200 }}\r\n                            placeholder=\"Select a person\"\r\n                            optionFilterProp=\"children\"\r\n                            onChange={this.onChangeSelect}\r\n                            filterOption={(input, option) =>\r\n                            option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                            >\r\n                            <Option value=\"PSD\">Jack</Option>\r\n                            <Option value=\"FranchisÃ©\">Lucy</Option>\r\n                            <Option value=\"G.compte\">Tom</Option>\r\n                        </Select>\r\n                        </FormItem>\r\n                        <FormItem>\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Creation de compte</Button>\r\n                          \r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n    validateFranchise=(value)=>{\r\n\r\n    }\r\n    validateName = (name) => {\r\n        if(name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n\r\n    validateEmail = (email) => {\r\n        if(!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email may not be empty'                \r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if(!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email not valid'\r\n            }\r\n        }\r\n\r\n        if(email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if(username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if(usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This username is already taken'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if(emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });    \r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This Email is already registered'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Signup;"]},"metadata":{},"sourceType":"module"}