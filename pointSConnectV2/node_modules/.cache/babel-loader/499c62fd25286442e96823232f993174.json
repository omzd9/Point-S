{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ZDLaP\\\\Desktop\\\\ReactProject\\\\connect\\\\point s connect v2\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\ZDLaP\\\\Desktop\\\\ReactProject\\\\connect\\\\point s connect v2\\\\src\\\\views\\\\addAccount.jsx\";\nimport React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../util/APIUtils';\nimport '../assets/css/Signup.css';\nimport { Link } from 'react-router-dom';\nimport { NAME_MIN_LENGTH, NAME_MAX_LENGTH, USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH, PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH } from '../constants';\nimport { Form, Input, Button, notification, Select } from 'antd';\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass addAccount extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validateFranchise = value => {\n      if (!value) {\n        return {\n          validateStatus: false,\n          errorMsg: 'Content may not be empty'\n        };\n      }\n\n      if (value.trim() == \"\") {\n        return {\n          validateStatus: false,\n          errorMsg: 'Content may not be empty'\n        };\n      }\n\n      return {\n        validateStatus: true,\n        errorMsg: null\n      };\n    };\n\n    this.validateName = name => {\n      if (name.length < NAME_MIN_LENGTH) {\n        return {\n          validateStatus: false,\n          errorMsg: \"Name is too short (Minimum \".concat(NAME_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (name.length > NAME_MAX_LENGTH) {\n        return {\n          validationStatus: false,\n          errorMsg: \"Name is too long (Maximum \".concat(NAME_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: true,\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validateEmail = email => {\n      if (!email) {\n        return {\n          validateStatus: false,\n          errorMsg: 'Email may not be empty'\n        };\n      }\n\n      const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n\n      if (!EMAIL_REGEX.test(email)) {\n        return {\n          validateStatus: false,\n          errorMsg: 'Email not valid'\n        };\n      }\n\n      if (email.length > EMAIL_MAX_LENGTH) {\n        return {\n          validateStatus: false,\n          errorMsg: \"Email is too long (Maximum \".concat(EMAIL_MAX_LENGTH, \" characters allowed)\")\n        };\n      }\n\n      return {\n        validateStatus: null,\n        errorMsg: null\n      };\n    };\n\n    this.validateUsername = username => {\n      if (username.length < USERNAME_MIN_LENGTH) {\n        return {\n          validateStatus: false,\n          errorMsg: \"Username is too short (Minimum \".concat(USERNAME_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (username.length > USERNAME_MAX_LENGTH) {\n        return {\n          validationStatus: false,\n          errorMsg: \"Username is too long (Maximum \".concat(USERNAME_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: null,\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validatePassword = password => {\n      if (password.length < PASSWORD_MIN_LENGTH) {\n        return {\n          validateStatus: false,\n          errorMsg: \"Password is too short (Minimum \".concat(PASSWORD_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (password.length > PASSWORD_MAX_LENGTH) {\n        return {\n          validationStatus: false,\n          errorMsg: \"Password is too long (Maximum \".concat(PASSWORD_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: true,\n          errorMsg: null\n        };\n      }\n    };\n\n    this.state = {\n      name: {\n        value: ''\n      },\n      username: {\n        value: ''\n      },\n      email: {\n        value: ''\n      },\n      password: {\n        value: ''\n      },\n      role: {\n        value: ''\n      },\n      ville: {\n        value: ''\n      },\n      societe: {\n        value: ''\n      },\n      fonction: {\n        value: ''\n      }\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\n    this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\n    this.isFormInvalid = this.isFormInvalid.bind(this);\n    this.onChangeSelect = this.onChangeSelect.bind(this);\n    this.validateFranchise = this.validateFranchise.bind(this);\n    this.handleRole = this.handleRole.bind(this);\n    this.renderElementSupplementaire = this.renderElementSupplementaire.bind(this);\n  }\n\n  renderElementSupplementaire(role) {\n    if (role === 'Franch') {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(FormItem, {\n        label: \"Ville\",\n        validateStatus: this.state.ville.validateStatus,\n        help: this.state.ville.errorMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"ville\",\n        autoComplete: \"off\",\n        placeholder: \"ex: Casablanca\",\n        value: this.state.ville.value,\n        onChange: event => this.handleRole(event, this.validateFranchise),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      })), React.createElement(FormItem, {\n        label: \"Fonction\",\n        validateStatus: this.state.fonction.validateStatus,\n        help: this.state.fonction.errorMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"fonctionFr\",\n        autoComplete: \"off\",\n        placeholder: \"ex: responsable marketing\",\n        value: this.state.fonction.value,\n        onChange: event => this.handleRole(event, this.validateFranchise),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })));\n    }\n\n    if (role === 'GCompte') {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(FormItem, {\n        label: \"Societe\",\n        validateStatus: this.state.societe.validateStatus,\n        help: this.state.societe.errorMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"societe\",\n        autoComplete: \"off\",\n        placeholder: \"ex: IAM\",\n        value: this.state.societe.value,\n        onChange: event => this.handleRole(event, this.validateFranchise),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      })), React.createElement(FormItem, {\n        label: \"Fonction\",\n        validateStatus: this.state.fonction.validateStatus,\n        help: this.state.fonction.errorMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Input, {\n        size: \"large\",\n        name: \"fonctionGc\",\n        autoComplete: \"off\",\n        placeholder: \"ex: responsable marketing\",\n        value: this.state.fonction.value,\n        onChange: event => this.handleRole(event, this.validateFranchise),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      })));\n    }\n  }\n\n  handleRole(event, validationFun) {\n    const target = event.target;\n    const inputName = target.name;\n    const inputValue = target.value;\n\n    if (inputName === \"fonctionGc\") {\n      this.setState({\n        'fonction': _objectSpread({\n          'value': inputValue\n        }, validationFun(inputValue))\n      });\n    }\n\n    if (inputName === \"fonctionFr\") {\n      this.setState({\n        'fonction': _objectSpread({\n          'value': inputValue\n        }, validationFun(inputValue))\n      });\n    }\n\n    if (inputName === \"ville\") {\n      this.setState({\n        'ville': _objectSpread({\n          'value': inputValue\n        }, validationFun(inputValue))\n      });\n    }\n\n    if (inputName === \"societe\") {\n      this.setState({\n        'societe': _objectSpread({\n          'value': inputValue\n        }, validationFun(inputValue))\n      });\n    }\n  }\n\n  handleInputChange(event, validationFun) {\n    const target = event.target;\n    const inputName = target.name;\n    const inputValue = target.value;\n    this.setState({\n      [inputName]: _objectSpread({\n        value: inputValue\n      }, validationFun(inputValue))\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const createAccountRequest = {\n      name: this.state.name.value,\n      email: this.state.email.value,\n      username: this.state.username.value,\n      password: this.state.password.value,\n      role: this.state.role.value\n    };\n    /*signup(signupRequest)\r\n    .then(response => {\r\n        notification.success({\r\n            message: 'Polling App',\r\n            description: \"Thank you! Account has been created successfully !\",\r\n        });          \r\n        this.props.history.push(\"/login\");\r\n    }).catch(error => {\r\n        notification.error({\r\n            message: 'Polling App',\r\n            description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n        });\r\n    });*/\n  }\n\n  isFormInvalid() {\n    if (this.state.role.value === 'PSD') {\n      return !(this.state.name.validateStatus === true && this.state.username.validateStatus === true && this.state.email.validateStatus === true && this.state.password.validateStatus === true && this.state.role.validateStatus === true);\n    }\n\n    if (this.state.role.value === 'Franch') {\n      return !(this.state.name.validateStatus === true && this.state.username.validateStatus === true && this.state.email.validateStatus === true && this.state.password.validateStatus === true && this.state.role.validateStatus === true && this.state.fonction.validateStatus === true && this.state.ville.validateStatus === true);\n    }\n\n    if (this.state.role.value === 'Gcompte') {\n      return !(this.state.name.validateStatus === true && this.state.username.validateStatus === true && this.state.email.validateStatus === true && this.state.password.validateStatus === true && this.state.role.validateStatus === true && this.state.fonction.validateStatus === true && this.state.societe.validateStatus === true);\n    }\n\n    return true;\n  }\n\n  onChangeSelect(value) {\n    this.setState({\n      'role': {\n        'value': value,\n        'validateStatus': true,\n        'errorMsg': null\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"signup-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, \"Creation d'un compte :\"), React.createElement(\"div\", {\n      className: \"signup-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"signup-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      label: \"Full Name\",\n      validateStatus: this.state.name.validateStatus,\n      help: this.state.name.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"name\",\n      autoComplete: \"off\",\n      placeholder: \"Full name\",\n      value: this.state.name.value,\n      onChange: event => this.handleInputChange(event, this.validateName),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Username\",\n      hasFeedback: true,\n      validateStatus: this.state.username.validateStatus,\n      help: this.state.username.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"username\",\n      autoComplete: \"off\",\n      placeholder: \"A unique username\",\n      value: this.state.username.value,\n      onBlur: this.validateUsernameAvailability,\n      onChange: event => this.handleInputChange(event, this.validateUsername),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Email\",\n      hasFeedback: true,\n      validateStatus: this.state.email.validateStatus,\n      help: this.state.email.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"email\",\n      type: \"email\",\n      autoComplete: \"off\",\n      placeholder: \"Your email\",\n      value: this.state.email.value,\n      onBlur: this.validateEmailAvailability,\n      onChange: event => this.handleInputChange(event, this.validateEmail),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Password\",\n      validateStatus: this.state.password.validateStatus,\n      help: this.state.password.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"password\",\n      type: \"password\",\n      autoComplete: \"off\",\n      placeholder: \"A password between 6 to 20 characters\",\n      value: this.state.password.value,\n      onChange: event => this.handleInputChange(event, this.validatePassword),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Role\",\n      validateStatus: this.state.role.validateStatus,\n      help: this.state.role.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(Select, {\n      showSearch: true,\n      style: {\n        width: 200\n      },\n      placeholder: \"Select a role\",\n      optionFilterProp: \"children\",\n      onChange: this.onChangeSelect,\n      filterOption: (input, option) => option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"PSD\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, \"PSD\"), React.createElement(Option, {\n      value: \"Franch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339\n      },\n      __self: this\n    }, \"Franchis\\xE9\"), React.createElement(Option, {\n      value: \"GCompte\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, \"Grande compte\"))), this.renderElementSupplementaire(this.state.role.value), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      size: \"large\",\n      className: \"signup-form-button\",\n      disabled: this.isFormInvalid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345\n      },\n      __self: this\n    }, \"Creation de compte\")))));\n  } // Validation Functions\n\n\n  validateUsernameAvailability() {\n    // First check for client side errors in username\n    const usernameValue = this.state.username.value;\n    const usernameValidation = this.validateUsername(usernameValue);\n\n    if (usernameValidation.validateStatus === false) {\n      this.setState({\n        username: _objectSpread({\n          value: usernameValue\n        }, usernameValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      username: {\n        value: usernameValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkUsernameAvailability(usernameValue).then(response => {\n      if (response.available) {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: true,\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: false,\n            errorMsg: 'This username is already taken'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        username: {\n          value: usernameValue,\n          validateStatus: true,\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n  validateEmailAvailability() {\n    // First check for client side errors in email\n    const emailValue = this.state.email.value;\n    const emailValidation = this.validateEmail(emailValue);\n\n    if (emailValidation.validateStatus === false) {\n      this.setState({\n        email: _objectSpread({\n          value: emailValue\n        }, emailValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      email: {\n        value: emailValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkEmailAvailability(emailValue).then(response => {\n      if (response.available) {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: true,\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: false,\n            errorMsg: 'This Email is already registered'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        email: {\n          value: emailValue,\n          validateStatus: true,\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n}\n\nexport default addAccount;","map":{"version":3,"sources":["C:\\Users\\ZDLaP\\Desktop\\ReactProject\\connect\\point s connect v2\\src\\views\\addAccount.jsx"],"names":["React","Component","signup","checkUsernameAvailability","checkEmailAvailability","Link","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","Form","Input","Button","notification","Select","FormItem","Item","Option","addAccount","constructor","props","validateFranchise","value","validateStatus","errorMsg","trim","validateName","name","length","validationStatus","validateEmail","email","EMAIL_REGEX","RegExp","test","validateUsername","username","validatePassword","password","state","role","ville","societe","fonction","handleInputChange","bind","handleSubmit","validateUsernameAvailability","validateEmailAvailability","isFormInvalid","onChangeSelect","handleRole","renderElementSupplementaire","event","validationFun","target","inputName","inputValue","setState","preventDefault","createAccountRequest","render","width","input","option","children","toLowerCase","indexOf","usernameValue","usernameValidation","then","response","available","catch","error","emailValue","emailValidation"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../util/APIUtils';\r\nimport '../assets/css/Signup.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../constants';\r\n\r\nimport { Form, Input, Button, notification,Select } from 'antd';\r\nconst FormItem = Form.Item;\r\nconst { Option } = Select;\r\n\r\nclass addAccount extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: {\r\n                value: ''\r\n            },\r\n            username: {\r\n                value: ''\r\n            },\r\n            email: {\r\n                value: ''\r\n            },\r\n            password: {\r\n                value: ''\r\n            },\r\n            role:{\r\n                value:'',   \r\n            },\r\n            ville:{\r\n                    value:''\r\n            },\r\n            societe:\r\n                {\r\n                     value:''\r\n                },\r\n            fonction:\r\n                     {\r\n                         value:''\r\n                    },\r\n\r\n            }\r\n        \r\n        \r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.validateUsernameAvailability = this.validateUsernameAvailability.bind(this);\r\n        this.validateEmailAvailability = this.validateEmailAvailability.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n        this.onChangeSelect = this.onChangeSelect.bind(this);\r\n        this.validateFranchise=this.validateFranchise.bind(this);\r\n        this.handleRole=this.handleRole.bind(this);\r\n        this.renderElementSupplementaire=this.renderElementSupplementaire.bind(this);\r\n    }\r\n renderElementSupplementaire(role)\r\n    {\r\n        if(role==='Franch')\r\n        {\r\n            return(\r\n            <div>\r\n                <FormItem label=\"Ville\"\r\n                            validateStatus={this.state.ville.validateStatus}\r\n                            help={this.state.ville.errorMsg}>\r\n                             \r\n                            <Input \r\n                                    size=\"large\"\r\n                                    name=\"ville\" \r\n                                    autoComplete=\"off\"\r\n                                    placeholder=\"ex: Casablanca\"\r\n                                    value= {this.state.ville.value} \r\n                                    onChange={(event) => this.handleRole(event, this.validateFranchise)} />    \r\n               </FormItem>\r\n                <FormItem \r\n                label=\"Fonction\"\r\n                validateStatus={this.state.fonction.validateStatus}\r\n                help={this.state.fonction.errorMsg}>\r\n                   \r\n                <Input \r\n                    size=\"large\"\r\n                    name=\"fonctionFr\" \r\n                    autoComplete=\"off\"\r\n                    placeholder=\"ex: responsable marketing\"\r\n                    value={this.state.fonction.value} \r\n                    onChange={(event) => this.handleRole(event, this.validateFranchise)} />    \r\n                </FormItem>\r\n            </div>\r\n            )\r\n\r\n        }\r\n        if(role ==='GCompte')\r\n        {\r\n            return(\r\n                <div>\r\n                <FormItem label=\"Societe\"\r\n                            validateStatus={this.state.societe.validateStatus}\r\n                            help={this.state.societe.errorMsg}>\r\n                             \r\n                                <Input \r\n                                    size=\"large\"\r\n                                    name=\"societe\" \r\n                                    autoComplete=\"off\"\r\n                                    placeholder=\"ex: IAM\"\r\n                                    value={this.state.societe.value} \r\n                                    onChange={(event) => this.handleRole(event, this.validateFranchise)} />    \r\n               </FormItem>\r\n                <FormItem label=\"Fonction\"\r\n                            validateStatus={this.state.fonction.validateStatus}\r\n                            help={this.state.fonction.errorMsg}>\r\n                \r\n                <Input \r\n                    size=\"large\"\r\n                    name=\"fonctionGc\" \r\n                    autoComplete=\"off\"\r\n                    placeholder=\"ex: responsable marketing\"\r\n                    value={this.state.fonction.value} \r\n                    onChange={(event) => this.handleRole(event, this.validateFranchise)} />    \r\n                </FormItem>\r\n                </div>\r\n            );\r\n            }\r\n\r\n        \r\n    }\r\n    handleRole(event,validationFun){\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n        if(inputName===\"fonctionGc\")\r\n        {\r\n            this.setState({\r\n                    'fonction':{\r\n                        'value': inputValue,\r\n                        ...validationFun(inputValue),\r\n                }\r\n            \r\n            });\r\n        }\r\n        if(inputName===\"fonctionFr\")\r\n        {\r\n            this.setState({\r\n               \r\n                    'fonction':{\r\n                        'value':inputValue,\r\n                            ...validationFun(inputValue),\r\n                    }\r\n            });\r\n        }\r\n        if(inputName===\"ville\")\r\n        {\r\n            this.setState({\r\n                \r\n                    'ville':{\r\n                        'value':inputValue,\r\n                        ...validationFun(inputValue)\r\n                \r\n            }\r\n            });\r\n        }\r\n        if(inputName===\"societe\")\r\n        {\r\n            this.setState({\r\n              \r\n                \r\n                    'societe':{\r\n                        'value': inputValue,\r\n                        ...validationFun(inputValue)\r\n\r\n            }\r\n            });\r\n        }\r\n    }\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n    \r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n    })\r\n}\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n    \r\n        const createAccountRequest = {\r\n            name: this.state.name.value,\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value,\r\n            role : this.state.role.value,\r\n        };\r\n        /*signup(signupRequest)\r\n        .then(response => {\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: \"Thank you! Account has been created successfully !\",\r\n            });          \r\n            this.props.history.push(\"/login\");\r\n        }).catch(error => {\r\n            notification.error({\r\n                message: 'Polling App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        });*/\r\n    }\r\n\r\n    isFormInvalid() {\r\n        \r\n        if(this.state.role.value==='PSD')\r\n        {\r\n        return !(this.state.name.validateStatus === true &&\r\n            this.state.username.validateStatus === true &&\r\n            this.state.email.validateStatus === true &&\r\n            this.state.password.validateStatus === true &&\r\n            this.state.role.validateStatus === true \r\n        );\r\n        }\r\n        if(this.state.role.value==='Franch')\r\n        {\r\n            return !(this.state.name.validateStatus === true &&\r\n            this.state.username.validateStatus === true &&\r\n            this.state.email.validateStatus === true &&\r\n            this.state.password.validateStatus === true &&\r\n            this.state.role.validateStatus === true &&\r\n            this.state.fonction.validateStatus === true &&\r\n            this.state.ville.validateStatus === true\r\n        );\r\n            }\r\n        if(this.state.role.value==='Gcompte')\r\n        {\r\n            return !(this.state.name.validateStatus === true &&\r\n            this.state.username.validateStatus === true &&\r\n            this.state.email.validateStatus === true &&\r\n            this.state.password.validateStatus === true &&\r\n            this.state.role.validateStatus === true &&\r\n            this.state.fonction.validateStatus === true &&\r\n            this.state.societe.validateStatus === true\r\n        );\r\n        }\r\n        return true;\r\n        \r\n    }\r\n    onChangeSelect(value) {\r\n\r\n        this.setState({\r\n            'role' : {\r\n                'value': value,\r\n                'validateStatus': true,\r\n                'errorMsg': null,\r\n                \r\n            }\r\n        });\r\n      }\r\n      \r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h1 className=\"page-title\">Creation d'un compte :</h1>\r\n                <div className=\"signup-content\">\r\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem \r\n                            label=\"Full Name\"\r\n                            validateStatus={this.state.name.validateStatus}\r\n                            help={this.state.name.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"name\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Full name\"\r\n                                value={this.state.name.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateName)} />    \r\n                        </FormItem>\r\n                        <FormItem label=\"Username\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.username.validateStatus}\r\n                            help={this.state.username.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"username\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A unique username\"\r\n                                value={this.state.username.value} \r\n                                onBlur={this.validateUsernameAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateUsername)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Email\"\r\n                            hasFeedback\r\n                            validateStatus={this.state.email.validateStatus}\r\n                            help={this.state.email.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"email\" \r\n                                type=\"email\" \r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Your email\"\r\n                                value={this.state.email.value} \r\n                                onBlur={this.validateEmailAvailability}\r\n                                onChange={(event) => this.handleInputChange(event, this.validateEmail)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Password\"\r\n                            validateStatus={this.state.password.validateStatus}\r\n                            help={this.state.password.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"password\" \r\n                                type=\"password\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"A password between 6 to 20 characters\" \r\n                                value={this.state.password.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validatePassword)} />  \r\n                        </FormItem>\r\n                          <FormItem \r\n                            label=\"Role\"\r\n                            validateStatus={this.state.role.validateStatus}\r\n                            help={this.state.role.errorMsg}>\r\n                           <Select\r\n                            showSearch\r\n                            style={{ width: 200 }}\r\n                            placeholder=\"Select a role\"\r\n                            optionFilterProp=\"children\"\r\n                            onChange={this.onChangeSelect}\r\n                            filterOption={(input, option) =>\r\n                            option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n                                }\r\n                            >\r\n                            <Option value=\"PSD\">PSD</Option>\r\n                            <Option value=\"Franch\">Franchisé</Option>\r\n                            <Option value=\"GCompte\">Grande compte</Option>\r\n                        </Select>\r\n                        </FormItem>\r\n                        {this.renderElementSupplementaire(this.state.role.value)}\r\n                        <FormItem>\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Creation de compte</Button>\r\n                          \r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n    validateFranchise=(value)=>{\r\n        if(!value) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Content may not be empty'                \r\n            \r\n            }\r\n        }\r\n        if(value.trim()==\"\")\r\n        {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Content may not be empty' \r\n            }  \r\n\r\n        }\r\n       \r\n        return {\r\n                validateStatus: true,\r\n                errorMsg: null  ,           \r\n            }\r\n    }\r\n \r\n    \r\n    validateName = (name) => {\r\n        if(name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: false ,\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: true,\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n\r\n    validateEmail = (email) => {\r\n        if(!email) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Email may not be empty'                \r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if(!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Email not valid'\r\n            }\r\n        }\r\n\r\n        if(email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateUsername = (username) => {\r\n        if(username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: false,\r\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateUsernameAvailability() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if(usernameValidation.validateStatus === false) {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: true,\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: false,\r\n                        errorMsg: 'This username is already taken'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    validateStatus: true,\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if(emailValidation.validateStatus === false) {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });    \r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: true,\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: false,\r\n                        errorMsg: 'This Email is already registered'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    validateStatus: true,\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: false,\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: true,\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default addAccount;"]},"metadata":{},"sourceType":"module"}