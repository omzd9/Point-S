{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ZDLaP\\\\Desktop\\\\ReactProject\\\\connect\\\\ReactJS\\\\points-connect\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\ZDLaP\\\\Desktop\\\\ReactProject\\\\connect\\\\ReactJS\\\\points-connect\\\\src\\\\views\\\\addEvent.jsx\";\nimport React, { Component } from 'react';\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../util/APIUtils';\nimport '../assets/css/Signup.css';\nimport { Link } from 'react-router-dom';\nimport { NAME_MIN_LENGTH, NAME_MAX_LENGTH, USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH, PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH } from '../constants';\nimport { Form, Input, Button, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass addEvent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validateContenu = name => {\n      if (name.length < NAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Name is too short (Minimum \".concat(NAME_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (name.length > NAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: \"Name is too long (Maximum \".concat(NAME_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validateDate = email => {\n      if (!email) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email may not be empty'\n        };\n      }\n\n      const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\n\n      if (!EMAIL_REGEX.test(email)) {\n        return {\n          validateStatus: 'error',\n          errorMsg: 'Email not valid'\n        };\n      }\n\n      if (email.length > EMAIL_MAX_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Email is too long (Maximum \".concat(EMAIL_MAX_LENGTH, \" characters allowed)\")\n        };\n      }\n\n      return {\n        validateStatus: null,\n        errorMsg: null\n      };\n    };\n\n    this.validateDescription = username => {\n      if (username.length < USERNAME_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Username is too short (Minimum \".concat(USERNAME_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (username.length > USERNAME_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: \"Username is too long (Maximum \".concat(USERNAME_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: null,\n          errorMsg: null\n        };\n      }\n    };\n\n    this.validatePassword = password => {\n      if (password.length < PASSWORD_MIN_LENGTH) {\n        return {\n          validateStatus: 'error',\n          errorMsg: \"Password is too short (Minimum \".concat(PASSWORD_MIN_LENGTH, \" characters needed.)\")\n        };\n      } else if (password.length > PASSWORD_MAX_LENGTH) {\n        return {\n          validationStatus: 'error',\n          errorMsg: \"Password is too long (Maximum \".concat(PASSWORD_MAX_LENGTH, \" characters allowed.)\")\n        };\n      } else {\n        return {\n          validateStatus: 'success',\n          errorMsg: null\n        };\n      }\n    };\n\n    this.state = {\n      title: {\n        value: ''\n      },\n      file: {\n        value: ''\n      },\n      content: {\n        value: ''\n      },\n      date: {\n        value: ''\n      }\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.isFormInvalid = this.isFormInvalid.bind(this);\n  }\n\n  handleInputChange(event, validationFun) {\n    const target = event.target;\n    const inputName = target.name;\n    const inputValue = target.value;\n    this.setState({\n      [inputName]: _objectSpread({\n        value: inputValue\n      }, validationFun(inputValue))\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const signupRequest = {\n      name: this.state.name.value,\n      email: this.state.email.value,\n      username: this.state.username.value,\n      password: this.state.password.value\n    };\n    signup(signupRequest).then(response => {\n      notification.success({\n        message: 'Polling App',\n        description: \"Thank you! You're successfully registered. Please Login to continue!\"\n      });\n      this.props.history.push(\"/login\");\n    }).catch(error => {\n      notification.error({\n        message: 'Polling App',\n        description: error.message || 'Sorry! Something went wrong. Please try again!'\n      });\n    });\n  }\n\n  isFormInvalid() {\n    return !(this.state.name.validateStatus === 'success' && this.state.username.validateStatus === 'success' && this.state.email.validateStatus === 'success' && this.state.password.validateStatus === 'success');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"signup-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Ajout d'un \\xE9v\\xE9nement ou actualit\\xE9\"), React.createElement(\"div\", {\n      className: \"signup-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"signup-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      label: \"Titre :\",\n      validateStatus: this.state.title.validateStatus,\n      help: this.state.title.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"title\",\n      autoComplete: \"off\",\n      placeholder: \"Titre ...\",\n      value: this.state.title.value,\n      onChange: event => this.handleInputChange(event, this.validateTitle),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Description :\",\n      validateStatus: this.state.description.validateStatus,\n      help: this.state.description.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"description\",\n      autoComplete: \"off\",\n      placeholder: \"description ...\",\n      value: this.state.name.value,\n      onChange: event => this.handleInputChange(event, this.validateDescription),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Contenu :\",\n      validateStatus: this.state.content.validateStatus,\n      help: this.state.content.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Input.TextArea, {\n      size: \"large\",\n      name: \"content\",\n      autoComplete: \"off\",\n      placeholder: \"Le contenu complet ...\",\n      value: this.state.name.value,\n      onChange: event => this.handleInputChange(event, this.validateContenu),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Date de cloture :\",\n      validateStatus: this.state.date.validateStatus,\n      help: this.state.date.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Input.Date, {\n      size: \"large\",\n      name: \"date\",\n      autoComplete: \"off\",\n      placeholder: \"La date de cloture de cet \\xE9v\\xE9nement ...\",\n      value: this.state.date.value,\n      onChange: event => this.handleInputChange(event, this.validateDate),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Image :\",\n      validateStatus: this.state.file.validateStatus,\n      help: this.state.file.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Input.File, {\n      size: \"large\",\n      name: \"date\",\n      autoComplete: \"off\",\n      placeholder: \"Image de dimension 1280x720px ...\",\n      value: this.state.file.value,\n      onChange: event => this.handleInputChange(event, this.validateFile),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      size: \"large\",\n      className: \"signup-form-button\",\n      disabled: this.isFormInvalid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Sign up\"), \"Already registed? \", React.createElement(Link, {\n      to: \"/login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"Login now!\")))));\n  } // Validation Functions\n\n\n  validateFile() {\n    // First check for client side errors in username\n    const usernameValue = this.state.username.value;\n    const usernameValidation = this.validateUsername(usernameValue);\n\n    if (usernameValidation.validateStatus === 'error') {\n      this.setState({\n        username: _objectSpread({\n          value: usernameValue\n        }, usernameValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      username: {\n        value: usernameValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkUsernameAvailability(usernameValue).then(response => {\n      if (response.available) {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          username: {\n            value: usernameValue,\n            validateStatus: 'error',\n            errorMsg: 'This username is already taken'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        username: {\n          value: usernameValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n  validateEmailAvailability() {\n    // First check for client side errors in email\n    const emailValue = this.state.email.value;\n    const emailValidation = this.validateEmail(emailValue);\n\n    if (emailValidation.validateStatus === 'error') {\n      this.setState({\n        email: _objectSpread({\n          value: emailValue\n        }, emailValidation)\n      });\n      return;\n    }\n\n    this.setState({\n      email: {\n        value: emailValue,\n        validateStatus: 'validating',\n        errorMsg: null\n      }\n    });\n    checkEmailAvailability(emailValue).then(response => {\n      if (response.available) {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'success',\n            errorMsg: null\n          }\n        });\n      } else {\n        this.setState({\n          email: {\n            value: emailValue,\n            validateStatus: 'error',\n            errorMsg: 'This Email is already registered'\n          }\n        });\n      }\n    }).catch(error => {\n      // Marking validateStatus as success, Form will be recchecked at server\n      this.setState({\n        email: {\n          value: emailValue,\n          validateStatus: 'success',\n          errorMsg: null\n        }\n      });\n    });\n  }\n\n}\n\nexport default addEvent;","map":{"version":3,"sources":["C:\\Users\\ZDLaP\\Desktop\\ReactProject\\connect\\ReactJS\\points-connect\\src\\views\\addEvent.jsx"],"names":["React","Component","signup","checkUsernameAvailability","checkEmailAvailability","Link","NAME_MIN_LENGTH","NAME_MAX_LENGTH","USERNAME_MIN_LENGTH","USERNAME_MAX_LENGTH","EMAIL_MAX_LENGTH","PASSWORD_MIN_LENGTH","PASSWORD_MAX_LENGTH","Form","Input","Button","notification","FormItem","Item","addEvent","constructor","props","validateContenu","name","length","validateStatus","errorMsg","validationStatus","validateDate","email","EMAIL_REGEX","RegExp","test","validateDescription","username","validatePassword","password","state","title","value","file","content","date","handleInputChange","bind","handleSubmit","isFormInvalid","event","validationFun","target","inputName","inputValue","setState","preventDefault","signupRequest","then","response","success","message","description","history","push","catch","error","render","validateTitle","validateFile","usernameValue","usernameValidation","validateUsername","available","validateEmailAvailability","emailValue","emailValidation","validateEmail"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { signup, checkUsernameAvailability, checkEmailAvailability } from '../util/APIUtils';\r\nimport '../assets/css/Signup.css';\r\nimport { Link } from 'react-router-dom';\r\nimport { \r\n    NAME_MIN_LENGTH, NAME_MAX_LENGTH, \r\n    USERNAME_MIN_LENGTH, USERNAME_MAX_LENGTH,\r\n    EMAIL_MAX_LENGTH,\r\n    PASSWORD_MIN_LENGTH, PASSWORD_MAX_LENGTH\r\n} from '../constants';\r\n\r\nimport { Form, Input, Button, notification } from 'antd';\r\nconst FormItem = Form.Item;\r\nclass addEvent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: {\r\n                value: ''\r\n            },\r\n            file: {\r\n                value: ''\r\n            },\r\n            content: {\r\n                value: ''\r\n            },\r\n            date: {\r\n                value: ''\r\n            }\r\n        }\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n    \r\n        const signupRequest = {\r\n            name: this.state.name.value,\r\n            email: this.state.email.value,\r\n            username: this.state.username.value,\r\n            password: this.state.password.value\r\n        };\r\n        signup(signupRequest)\r\n        .then(response => {\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: \"Thank you! You're successfully registered. Please Login to continue!\",\r\n            });          \r\n            this.props.history.push(\"/login\");\r\n        }).catch(error => {\r\n            notification.error({\r\n                message: 'Polling App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        });\r\n    }\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.name.validateStatus === 'success' &&\r\n            this.state.username.validateStatus === 'success' &&\r\n            this.state.email.validateStatus === 'success' &&\r\n            this.state.password.validateStatus === 'success'\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"signup-container\">\r\n                <h1 className=\"page-title\">Ajout d'un événement ou actualité</h1>\r\n                <div className=\"signup-content\">\r\n                    <Form onSubmit={this.handleSubmit} className=\"signup-form\">\r\n                        <FormItem \r\n                            label=\"Titre :\"\r\n                            validateStatus={this.state.title.validateStatus}\r\n                            help={this.state.title.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"title\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Titre ...\"\r\n                                value={this.state.title.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateTitle)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Description :\"\r\n                            validateStatus={this.state.description.validateStatus}\r\n                            help={this.state.description.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"description\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"description ...\"\r\n                                value={this.state.name.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateDescription)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Contenu :\"\r\n                            validateStatus={this.state.content.validateStatus}\r\n                            help={this.state.content.errorMsg}>\r\n                            <Input.TextArea \r\n                                size=\"large\"\r\n                                name=\"content\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Le contenu complet ...\"\r\n                                value={this.state.name.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateContenu)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Date de cloture :\"\r\n                            validateStatus={this.state.date.validateStatus}\r\n                            help={this.state.date.errorMsg}>\r\n                            <Input.Date\r\n                                size=\"large\"\r\n                                name=\"date\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"La date de cloture de cet événement ...\"\r\n                                value={this.state.date.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateDate)} />    \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Image :\"\r\n                            validateStatus={this.state.file.validateStatus}\r\n                            help={this.state.file.errorMsg}>\r\n                            <Input.File\r\n                                size=\"large\"\r\n                                name=\"date\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Image de dimension 1280x720px ...\"\r\n                                value={this.state.file.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateFile)} />    \r\n                        </FormItem>\r\n                        <FormItem>\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                className=\"signup-form-button\"\r\n                                disabled={this.isFormInvalid()}>Sign up</Button>\r\n                            Already registed? <Link to=\"/login\">Login now!</Link>\r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n\r\n    validateContenu = (name) => {\r\n        if(name.length < NAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Name is too short (Minimum ${NAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (name.length > NAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Name is too long (Maximum ${NAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n              };            \r\n        }\r\n    }\r\n\r\n    validateDate = (email) => {\r\n        if(!email) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email may not be empty'                \r\n            }\r\n        }\r\n\r\n        const EMAIL_REGEX = RegExp('[^@ ]+@[^@ ]+\\\\.[^@ ]+');\r\n        if(!EMAIL_REGEX.test(email)) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: 'Email not valid'\r\n            }\r\n        }\r\n\r\n        if(email.length > EMAIL_MAX_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Email is too long (Maximum ${EMAIL_MAX_LENGTH} characters allowed)`\r\n            }\r\n        }\r\n\r\n        return {\r\n            validateStatus: null,\r\n            errorMsg: null\r\n        }\r\n    }\r\n\r\n    validateDescription = (username) => {\r\n        if(username.length < USERNAME_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Username is too short (Minimum ${USERNAME_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (username.length > USERNAME_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Username is too long (Maximum ${USERNAME_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: null,\r\n                errorMsg: null\r\n            }\r\n        }\r\n    }\r\n\r\n    validateFile() {\r\n        // First check for client side errors in username\r\n        const usernameValue = this.state.username.value;\r\n        const usernameValidation = this.validateUsername(usernameValue);\r\n\r\n        if(usernameValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    ...usernameValidation\r\n                }\r\n            });\r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            username: {\r\n                value: usernameValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkUsernameAvailability(usernameValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    username: {\r\n                        value: usernameValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This username is already taken'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                username: {\r\n                    value: usernameValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validateEmailAvailability() {\r\n        // First check for client side errors in email\r\n        const emailValue = this.state.email.value;\r\n        const emailValidation = this.validateEmail(emailValue);\r\n\r\n        if(emailValidation.validateStatus === 'error') {\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    ...emailValidation\r\n                }\r\n            });    \r\n            return;\r\n        }\r\n\r\n        this.setState({\r\n            email: {\r\n                value: emailValue,\r\n                validateStatus: 'validating',\r\n                errorMsg: null\r\n            }\r\n        });\r\n\r\n        checkEmailAvailability(emailValue)\r\n        .then(response => {\r\n            if(response.available) {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'success',\r\n                        errorMsg: null\r\n                    }\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    email: {\r\n                        value: emailValue,\r\n                        validateStatus: 'error',\r\n                        errorMsg: 'This Email is already registered'\r\n                    }\r\n                });\r\n            }\r\n        }).catch(error => {\r\n            // Marking validateStatus as success, Form will be recchecked at server\r\n            this.setState({\r\n                email: {\r\n                    value: emailValue,\r\n                    validateStatus: 'success',\r\n                    errorMsg: null\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    validatePassword = (password) => {\r\n        if(password.length < PASSWORD_MIN_LENGTH) {\r\n            return {\r\n                validateStatus: 'error',\r\n                errorMsg: `Password is too short (Minimum ${PASSWORD_MIN_LENGTH} characters needed.)`\r\n            }\r\n        } else if (password.length > PASSWORD_MAX_LENGTH) {\r\n            return {\r\n                validationStatus: 'error',\r\n                errorMsg: `Password is too long (Maximum ${PASSWORD_MAX_LENGTH} characters allowed.)`\r\n            }\r\n        } else {\r\n            return {\r\n                validateStatus: 'success',\r\n                errorMsg: null,\r\n            };            \r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default addEvent;"]},"metadata":{},"sourceType":"module"}