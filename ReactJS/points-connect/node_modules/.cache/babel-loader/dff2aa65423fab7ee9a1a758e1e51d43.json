{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\ZDLaP\\\\Desktop\\\\ReactProject\\\\connect\\\\ReactJS\\\\points-connect\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\ZDLaP\\\\Desktop\\\\ReactProject\\\\connect\\\\ReactJS\\\\points-connect\\\\src\\\\views\\\\addEvent.jsx\";\nimport React, { Component } from 'react';\nimport '../assets/css/addEvent.css'; //import { Link } from 'react-router-dom';\n\nimport { createEvent } from '../util/APIUtils';\nimport { Form, Input, DatePicker, Button, Upload, Icon, notification } from 'antd';\nconst FormItem = Form.Item;\n\nclass addEvent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.validateContenu = content => {\n      if (!content) {\n        return {\n          validateStatus: false,\n          errorMsg: 'Content may not be empty'\n        };\n      }\n\n      if (content.trim() == \"\") {\n        return {\n          validateStatus: false,\n          errorMsg: 'Content may not be empty'\n        };\n      }\n\n      return {\n        validateStatus: true,\n        errorMsg: null\n      };\n    };\n\n    this.validateDescription = description => {\n      if (!description) {\n        return {\n          validateStatus: false,\n          errorMsg: 'Content may not be empty'\n        };\n      }\n\n      if (description.trim() == \"\") {\n        return {\n          validateStatus: false,\n          errorMsg: 'Content may not be empty'\n        };\n      }\n\n      return {\n        validateStatus: true,\n        errorMsg: null\n      };\n    };\n\n    this.state = {\n      title: {\n        value: ''\n      },\n      file: {\n        value: ''\n      },\n      content: {\n        value: ''\n      },\n      date: {\n        value: ''\n      },\n      description: {\n        value: ''\n      }\n    };\n    const prop = {\n      onRemove: file => {\n        this.setState({\n          'file': {\n            'value': null,\n            'fileList': [],\n            'validateStatus': false,\n            'errorMsg': null\n          }\n        });\n      },\n      beforeUpload: file => {\n        this.setState({\n          'file': {\n            'value': file,\n            'fileList': [file],\n            'validateStatus': true,\n            'errorMsg': null\n          }\n        });\n      },\n      accept: \".png,.jpg,.jpeg\",\n      listType: 'picture',\n      fileList: this.state.file.fileList,\n      onChange: this.FileUploadchange,\n      multiple: false\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.isFormInvalid = this.isFormInvalid.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.FileUploadchange = this.FileUploadchange.bind(this);\n  }\n\n  handleInputChange(event, validationFun) {\n    const target = event.target;\n    const inputName = target.name;\n    const inputValue = target.value;\n    this.setState({\n      [inputName]: _objectSpread({\n        value: inputValue\n      }, validationFun(inputValue))\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const addEvent = {\n      title: this.state.title.value,\n      description: this.state.description.value,\n      content: this.state.content.value,\n      date: this.state.date.valueString,\n      file: this.state.file.content\n    };\n    createEvent(addEvent).then(response => {\n      notification.success({\n        message: 'Polling App',\n        description: \"Event successfully has been added !\"\n      });\n      this.props.history.push(\"/CreateEvent\");\n      this.setState({\n        'title': {\n          'value': ''\n        },\n        'file': {\n          'value': ''\n        },\n        'content': {\n          'value': ''\n        },\n        'date': {\n          'value': ''\n        },\n        'description': {\n          'value': ''\n        }\n      });\n    }).catch(error => {\n      notification.error({\n        message: 'Polling App',\n        description: error.message || 'Sorry! Something went wrong. Please try again!'\n      });\n    });\n  }\n\n  isFormInvalid() {\n    return !(this.state.description.validateStatus === true && this.state.file.validateStatus === true && this.state.content.validateStatus === true && this.state.title.validateStatus === true && this.state.date.validateStatus === true);\n  }\n\n  onChangeDate(date, dateString) {\n    if (dateString.trim() == \"\") {\n      this.setState({\n        'date': {\n          'value': null,\n          'valueString': null,\n          'validateStatus': false,\n          'errorMsg': 'Empty value'\n        }\n      });\n    } else {\n      this.setState({\n        'date': {\n          'value': date,\n          'valueString': dateString,\n          'validateStatus': true,\n          'errorMsg': null\n        }\n      });\n    }\n  }\n\n  FileUploadchange(event) {\n    if (!event.target.value) {\n      this.setState({\n        'file': {\n          'value': null,\n          'content': null,\n          'validateStatus': false,\n          'errorMsg': \"failed to upload\"\n        }\n      });\n    } else {\n      this.setState({\n        'file': {\n          'value': event.target.value,\n          'validateStatus': true,\n          'content': event.target.files[0],\n          'errorMsg': \"successfully uploaded\"\n        }\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"addEvent-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Ajout d'un \\xE9v\\xE9nement ou actualit\\xE9 :\"), React.createElement(\"div\", {\n      className: \"addEvent-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"addEvent-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(FormItem, {\n      label: \"Titre :\",\n      validateStatus: this.state.title.validateStatus,\n      help: this.state.title.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, React.createElement(Input, {\n      className: \"addEvent-form-Input\",\n      size: \"large\",\n      name: \"title\",\n      autoComplete: \"off\",\n      placeholder: \"Titre ...\",\n      value: this.state.title.value,\n      onChange: event => this.handleInputChange(event, this.validateTitle),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Description :\",\n      validateStatus: this.state.description.validateStatus,\n      help: this.state.description.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(Input, {\n      size: \"large\",\n      name: \"Description\",\n      className: \"addEvent-form-Input\",\n      autoComplete: \"off\",\n      placeholder: \"Description ...\",\n      value: this.state.description.value,\n      onChange: event => this.handleInputChange(event, this.validateDescription),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Date de Cl\\xF4ture :\",\n      validateStatus: this.state.date.validateStatus,\n      help: this.state.date.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      size: \"large\",\n      name: \"date\",\n      value: this.state.date.value,\n      onChange: this.onChangeDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Image :\",\n      validateStatus: this.state.file.validateStatus,\n      help: this.state.file.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"file\",\n      className: \".addEvent-form-Input\",\n      accept: \"image/png, image/jpeg, image/jpg\",\n      value: this.state.file.value,\n      onChange: this.FileUploadchange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      label: \"Contenu :\",\n      validateStatus: this.state.content.validateStatus,\n      help: this.state.content.errorMsg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(Input.TextArea, {\n      rows: \"10\",\n      size: \"large\",\n      name: \"content\",\n      autoComplete: \"off\",\n      placeholder: \"Le contenu complet ...\",\n      value: this.state.content.value,\n      onChange: event => this.handleInputChange(event, this.validateContenu),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    })), React.createElement(FormItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      size: \"large\",\n      className: \"addEvent-form-button\",\n      disabled: this.isFormInvalid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Confirmation\")))));\n  } // Validation Functions\n\n\n  validateTitle(title) {\n    if (!title) {\n      return {\n        validateStatus: false,\n        errorMsg: 'Title may not be empty'\n      };\n    }\n\n    if (title.trim() == \"\") {\n      return {\n        validateStatus: false,\n        errorMsg: 'Title may not be empty'\n      };\n    }\n\n    return {\n      validateStatus: true,\n      errorMsg: null\n    };\n  }\n\n}\n\nexport default addEvent;","map":{"version":3,"sources":["C:\\Users\\ZDLaP\\Desktop\\ReactProject\\connect\\ReactJS\\points-connect\\src\\views\\addEvent.jsx"],"names":["React","Component","createEvent","Form","Input","DatePicker","Button","Upload","Icon","notification","FormItem","Item","addEvent","constructor","props","validateContenu","content","validateStatus","errorMsg","trim","validateDescription","description","state","title","value","file","date","prop","onRemove","setState","beforeUpload","accept","listType","fileList","onChange","FileUploadchange","multiple","handleInputChange","bind","handleSubmit","isFormInvalid","onChangeDate","event","validationFun","target","inputName","name","inputValue","preventDefault","valueString","then","response","success","message","history","push","catch","error","dateString","files","render","validateTitle"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport '../assets/css/addEvent.css';\r\n//import { Link } from 'react-router-dom';\r\nimport { createEvent } from '../util/APIUtils';\r\n\r\nimport { Form, Input, DatePicker,Button,Upload,Icon,notification } from 'antd';\r\nconst FormItem = Form.Item;\r\n\r\nclass addEvent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: {\r\n                value: ''\r\n            },\r\n            file: {\r\n                value: ''\r\n            },\r\n            content: {\r\n                value: ''\r\n            },\r\n            date: {\r\n                value: ''\r\n            },\r\n            description: {\r\n             value: ''\r\n         }\r\n\r\n        }\r\n      \r\n        const prop = {\r\n            onRemove: file => {\r\n                this.setState({\r\n                    'file' : {\r\n                        'value' : null,\r\n                        'fileList': [],\r\n                        'validateStatus': false,\r\n                        'errorMsg': null,\r\n                       \r\n                    }\r\n                });\r\n            },\r\n            beforeUpload: file => {\r\n                this.setState({\r\n                    'file' : {\r\n                        'value' : file,\r\n                        'fileList': [file],\r\n                        'validateStatus': true,\r\n                        'errorMsg': null,\r\n                       \r\n                    }\r\n                });\r\n            },\r\n            accept :\".png,.jpg,.jpeg\",\r\n            listType:'picture',\r\n            fileList:this.state.file.fileList,\r\n            onChange:this.FileUploadchange,\r\n            multiple:false,\r\n          };\r\n        \r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.isFormInvalid = this.isFormInvalid.bind(this);\r\n        this.onChangeDate=this.onChangeDate.bind(this);\r\n        this.FileUploadchange=this.FileUploadchange.bind(this);\r\n       \r\n          \r\n    }\r\n\r\n    handleInputChange(event, validationFun) {\r\n        const target = event.target;\r\n        const inputName = target.name;        \r\n        const inputValue = target.value;\r\n\r\n        this.setState({\r\n            [inputName] : {\r\n                value: inputValue,\r\n                ...validationFun(inputValue)\r\n            }\r\n        });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const addEvent = {\r\n            title: this.state.title.value,\r\n            description: this.state.description.value,\r\n            content: this.state.content.value,\r\n            date: this.state.date.valueString,\r\n            file: this.state.file.content,\r\n        };\r\n        createEvent(addEvent)\r\n        .then(response => {\r\n            notification.success({\r\n                message: 'Polling App',\r\n                description: \"Event successfully has been added !\",\r\n            });          \r\n            this.props.history.push(\"/CreateEvent\");\r\n            this.setState({\r\n                    'title': {\r\n                        'value': ''\r\n                    },\r\n                    'file': {\r\n                        'value': ''\r\n                    },\r\n                    'content': {\r\n                        'value': ''\r\n                    },\r\n                    'date': {\r\n                        'value': ''\r\n                    },\r\n                    'description': {\r\n                     'value': ''\r\n                 }\r\n        \r\n                });\r\n            \r\n        }).catch(error => {\r\n            notification.error({\r\n                message: 'Polling App',\r\n                description: error.message || 'Sorry! Something went wrong. Please try again!'\r\n            });\r\n        });\r\n        \r\n    }\r\n\r\n\r\n    isFormInvalid() {\r\n        return !(this.state.description.validateStatus === true &&\r\n            this.state.file.validateStatus === true && this.state.content.validateStatus === true\r\n            && this.state.title.validateStatus === true && this.state.date.validateStatus === true\r\n           \r\n        );\r\n    }\r\n    onChangeDate(date, dateString) {\r\n    if(dateString.trim()==\"\")\r\n    {\r\n            this.setState({\r\n                'date' : {\r\n                'value' : null,\r\n                'valueString':null,\r\n                'validateStatus': false,\r\n                'errorMsg': 'Empty value',\r\n                },\r\n            });\r\n    }\r\n    else{\r\n        this.setState({\r\n            'date' : {\r\n            'value' : date,\r\n            'valueString':dateString,\r\n            'validateStatus': true,\r\n            'errorMsg': null,\r\n            },\r\n        });\r\n    }\r\n     \r\n   }\r\n   FileUploadchange(event){\r\n      if(!event.target.value)\r\n      {\r\n        this.setState({\r\n            'file' : {\r\n                'value' : null,\r\n                'content':null,\r\n                'validateStatus': false,\r\n                'errorMsg': \"failed to upload\",\r\n               \r\n            }\r\n        });\r\n    }\r\n      else{\r\n        this.setState({\r\n            'file' : {\r\n                'value' : event.target.value,\r\n                'validateStatus': true,\r\n                'content':event.target.files[0],\r\n                'errorMsg': \"successfully uploaded\",\r\n               \r\n            }\r\n      });\r\n        \r\n        }\r\n\r\n        \r\n   }\r\n   \r\n    render() {\r\n  \r\n        return (\r\n            <div className=\"addEvent-container\">\r\n                <h1 className=\"page-title\">Ajout d'un événement ou actualité :</h1>\r\n                <div className=\"addEvent-content\">\r\n                    <Form onSubmit={this.handleSubmit} className=\"addEvent-form\">\r\n                        <FormItem \r\n                            label=\"Titre :\"\r\n                            validateStatus={this.state.title.validateStatus}\r\n                            help={this.state.title.errorMsg}>\r\n                            <Input \r\n                                \r\n                                className=\"addEvent-form-Input\"\r\n                                size=\"large\"\r\n                                name=\"title\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Titre ...\"\r\n                                value={this.state.title.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateTitle)} />  \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Description :\"\r\n                            validateStatus={this.state.description.validateStatus}\r\n                            help={this.state.description.errorMsg}>\r\n                            <Input \r\n                                size=\"large\"\r\n                                name=\"Description\"\r\n                                className=\"addEvent-form-Input\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Description ...\"\r\n                                value={this.state.description.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateDescription)} />    \r\n                        </FormItem>\r\n                       \r\n                        \r\n                        <FormItem \r\n                            label=\"Date de Clôture :\"\r\n                            validateStatus={this.state.date.validateStatus}\r\n                            help={this.state.date.errorMsg}>\r\n                          \r\n                               <DatePicker \r\n                                size=\"large\"\r\n                                name=\"date\"                \r\n                                value={this.state.date.value} \r\n                                onChange={this.onChangeDate} />\r\n                               \r\n                        </FormItem>\r\n                        <FormItem \r\n                            label=\"Image :\"\r\n                            validateStatus={this.state.file.validateStatus}\r\n                            help={this.state.file.errorMsg}>\r\n                           \r\n                            <input \r\n                                    type=\"file\"\r\n                                    className=\".addEvent-form-Input\"\r\n                                    accept=\"image/png, image/jpeg, image/jpg\"\r\n                                    value={this.state.file.value} \r\n                                    onChange={this.FileUploadchange} /> \r\n                        </FormItem>\r\n                      \r\n                        <FormItem \r\n                            label=\"Contenu :\"\r\n                            validateStatus={this.state.content.validateStatus}\r\n                            help={this.state.content.errorMsg}\r\n                            >\r\n                            <Input.TextArea\r\n                               \r\n                                rows=\"10\"\r\n                                size=\"large\"\r\n                                name=\"content\"\r\n                                autoComplete=\"off\"\r\n                                placeholder=\"Le contenu complet ...\"\r\n                                value={this.state.content.value} \r\n                                onChange={(event) => this.handleInputChange(event, this.validateContenu)} />    \r\n                        </FormItem>\r\n                        <FormItem>\r\n                            <Button type=\"primary\" \r\n                                htmlType=\"submit\" \r\n                                size=\"large\" \r\n                                className=\"addEvent-form-button\"\r\n                                disabled={this.isFormInvalid()}>Confirmation</Button>\r\n                            \r\n                        </FormItem>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    // Validation Functions\r\n\r\n    validateContenu = (content) => {\r\n        if(!content) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Content may not be empty'                \r\n            \r\n            }\r\n        }\r\n        if(content.trim()==\"\")\r\n        {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Content may not be empty' \r\n            }  \r\n\r\n        }\r\n       \r\n        return {\r\n                validateStatus: true,\r\n                errorMsg: null   ,           \r\n            }\r\n        }\r\n        \r\n    validateTitle(title){\r\n        if(!title) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Title may not be empty'                \r\n            \r\n            }\r\n        }\r\n        if(title.trim()==\"\")\r\n        {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Title may not be empty' \r\n            }  \r\n\r\n        }\r\n     \r\n        return {\r\n                validateStatus: true,\r\n                errorMsg: null   ,           \r\n            }\r\n    }\r\n\r\n   \r\n    validateDescription = (description) => {\r\n        if(!description) {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Content may not be empty'                \r\n            \r\n            }\r\n        }\r\n        if(description.trim()==\"\")\r\n        {\r\n            return {\r\n                validateStatus: false,\r\n                errorMsg: 'Content may not be empty' \r\n            }  \r\n\r\n        }\r\n       \r\n        return {\r\n                validateStatus: true,\r\n                errorMsg: null   ,           \r\n            }\r\n    }\r\n\r\n   }\r\n\r\nexport default addEvent;"]},"metadata":{},"sourceType":"module"}