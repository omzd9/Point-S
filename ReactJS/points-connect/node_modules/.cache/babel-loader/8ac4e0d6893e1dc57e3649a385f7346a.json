{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Truncate = function (_Component) {\n  _inherits(Truncate, _Component);\n\n  function Truncate() {\n    var _ref;\n\n    _classCallCheck(this, Truncate);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var _this = _possibleConstructorReturn(this, (_ref = Truncate.__proto__ || Object.getPrototypeOf(Truncate)).call.apply(_ref, [this].concat(args)));\n\n    _this.state = {};\n    _this.styles = {\n      ellipsis: {\n        position: 'fixed',\n        visibility: 'hidden',\n        top: 0,\n        left: 0\n      }\n    };\n    _this.onResize = _this.onResize.bind(_this);\n    _this.onTruncate = _this.onTruncate.bind(_this);\n    _this.calcTargetWidth = _this.calcTargetWidth.bind(_this);\n    _this.measureWidth = _this.measureWidth.bind(_this);\n    _this.getLines = _this.getLines.bind(_this);\n    _this.renderLine = _this.renderLine.bind(_this);\n    return _this;\n  }\n\n  _createClass(Truncate, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // Node not needed in document tree to read its content\n      this.refs.text.parentNode.removeChild(this.refs.text); // Keep node in document body to read .offsetWidth\n\n      document.body.appendChild(this.refs.ellipsis);\n      var canvas = document.createElement('canvas');\n      this.canvas = canvas.getContext('2d');\n      window.addEventListener('resize', this.onResize);\n      this.onResize();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps) {\n      // Render was based on outdated refs and needs to be rerun\n      if (this.props.children !== prevProps.children) {\n        this.forceUpdate();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      document.body.removeChild(this.refs.ellipsis);\n      window.removeEventListener('resize', this.onResize);\n      cancelAnimationFrame(this.timeout);\n    } // Shim innerText to consistently break lines at <br/> but not at \\n\n\n  }, {\n    key: 'innerText',\n    value: function innerText(node) {\n      var div = document.createElement('div');\n      div.innerHTML = node.innerHTML.replace(/\\r\\n|\\r|\\n/g, ' ');\n      var text = div.innerText;\n      var test = document.createElement('div');\n      test.innerHTML = 'foo<br/>bar';\n\n      if (test.innerText.replace(/\\r\\n|\\r/g, '\\n') !== 'foo\\nbar') {\n        div.innerHTML = div.innerHTML.replace(/<br.*?[\\/]?>/gi, '\\n');\n        text = div.innerText;\n      }\n\n      return text;\n    }\n  }, {\n    key: 'onResize',\n    value: function onResize() {\n      this.calcTargetWidth();\n    }\n  }, {\n    key: 'onTruncate',\n    value: function onTruncate(didTruncate) {\n      var onTruncate = this.props.onTruncate;\n\n      if (typeof onTruncate === 'function') {\n        this.timeout = requestAnimationFrame(function () {\n          onTruncate(didTruncate);\n        });\n      }\n    }\n  }, {\n    key: 'calcTargetWidth',\n    value: function calcTargetWidth() {\n      var target = this.refs.target,\n          calcTargetWidth = this.calcTargetWidth,\n          canvas = this.canvas; // Calculation is no longer relevant, since node has been removed\n\n      if (!target) {\n        return;\n      }\n\n      var targetWidth = this.props.options.fixedWidth || target.parentNode.getBoundingClientRect().width; // Delay calculation until parent node is inserted to the document\n      // Mounting order in React is ChildComponent, ParentComponent\n\n      if (!targetWidth) {\n        return requestAnimationFrame(calcTargetWidth);\n      }\n\n      var style = window.getComputedStyle(target);\n      var font = [style['font-weight'], style['font-style'], style['font-size'], style['font-family']].join(' ');\n      canvas.font = font;\n      this.setState({\n        targetWidth: targetWidth\n      });\n    }\n  }, {\n    key: 'measureWidth',\n    value: function measureWidth(text) {\n      return this.canvas.measureText(text).width;\n    }\n  }, {\n    key: 'ellipsisWidth',\n    value: function ellipsisWidth(node) {\n      return node.offsetWidth;\n    }\n  }, {\n    key: 'getLines',\n    value: function getLines() {\n      var refs = this.refs,\n          _props = this.props,\n          numLines = _props.lines,\n          ellipsis = _props.ellipsis,\n          targetWidth = this.state.targetWidth,\n          innerText = this.innerText,\n          measureWidth = this.measureWidth,\n          onTruncate = this.onTruncate;\n      var lines = [];\n      var text = innerText(refs.text);\n      var textLines = text.split('\\n').map(function (line) {\n        return line.split(' ');\n      });\n      var didTruncate = true;\n      var ellipsisWidth = this.ellipsisWidth(this.refs.ellipsis);\n\n      for (var line = 1; line <= numLines; line++) {\n        var textWords = textLines[0]; // Handle newline\n\n        if (textWords.length === 0) {\n          lines.push();\n          textLines.shift();\n          line--;\n          continue;\n        }\n\n        var resultLine = textWords.join(' ');\n\n        if (measureWidth(resultLine) < targetWidth) {\n          if (textLines.length === 1) {\n            // Line is end of text and fits without truncating //\n            didTruncate = false;\n            lines.push(resultLine);\n            break;\n          }\n        }\n\n        if (line === numLines) {\n          // Binary search determining the longest possible line inluding truncate string //\n          var textRest = textWords.join(' ');\n          var lower = 0;\n          var upper = textRest.length - 1;\n\n          while (lower <= upper) {\n            var middle = Math.floor((lower + upper) / 2);\n            var testLine = textRest.slice(0, middle + 1);\n\n            if (measureWidth(testLine) + ellipsisWidth <= targetWidth) {\n              lower = middle + 1;\n            } else {\n              upper = middle - 1;\n            }\n          }\n\n          resultLine = _react2.default.createElement('span', null, textRest.slice(0, lower), ellipsis);\n        } else {\n          // Binary search determining when the line breaks //\n          var _lower = 0;\n\n          var _upper = textWords.length - 1;\n\n          while (_lower <= _upper) {\n            var _middle = Math.floor((_lower + _upper) / 2);\n\n            var _testLine = textWords.slice(0, _middle + 1).join(' ');\n\n            if (measureWidth(_testLine) <= targetWidth) {\n              _lower = _middle + 1;\n            } else {\n              _upper = _middle - 1;\n            }\n          } // The first word of this line is too long to fit it\n\n\n          if (_lower === 0) {\n            // Jump to processing of last line\n            line = numLines - 1;\n            continue;\n          }\n\n          resultLine = textWords.slice(0, _lower).join(' ');\n          textLines[0].splice(0, _lower);\n        }\n\n        lines.push(resultLine);\n      }\n\n      onTruncate(didTruncate);\n      return lines;\n    }\n  }, {\n    key: 'renderLine',\n    value: function renderLine(line, i, arr) {\n      if (i === arr.length - 1) {\n        return _react2.default.createElement('span', {\n          key: i\n        }, line);\n      }\n\n      var br = _react2.default.createElement('br', {\n        key: i + 'br'\n      });\n\n      if (line) {\n        return [_react2.default.createElement('span', {\n          key: i\n        }, line), br];\n      }\n\n      return br;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var target = this.refs.target,\n          _props2 = this.props,\n          children = _props2.children,\n          ellipsis = _props2.ellipsis,\n          lines = _props2.lines,\n          spanProps = _objectWithoutProperties(_props2, ['children', 'ellipsis', 'lines']),\n          targetWidth = this.state.targetWidth,\n          getLines = this.getLines,\n          renderLine = this.renderLine,\n          onTruncate = this.onTruncate;\n\n      var text = children;\n\n      if (typeof window !== 'undefined') {\n        if (target && targetWidth && lines > 0) {\n          text = getLines().map(renderLine);\n        } else {\n          onTruncate(false);\n        }\n      }\n\n      delete spanProps.onTruncate;\n      delete spanProps.options;\n      return _react2.default.createElement('span', _extends({}, spanProps, {\n        ref: 'target'\n      }), text, _react2.default.createElement('span', {\n        ref: 'text'\n      }, children), _react2.default.createElement('span', {\n        ref: 'ellipsis',\n        style: this.styles.ellipsis\n      }, ellipsis));\n    }\n  }]);\n\n  return Truncate;\n}(_react.Component);\n\nTruncate.propTypes = {\n  children: _react.PropTypes.node,\n  ellipsis: _react.PropTypes.node,\n  lines: _react.PropTypes.oneOfType([_react.PropTypes.oneOf([false]), _react.PropTypes.number]),\n  options: _react.PropTypes.object,\n  onTruncate: _react.PropTypes.func\n};\nTruncate.defaultProps = {\n  children: '',\n  ellipsis: '…',\n  options: {},\n  lines: 1\n};\nexports.default = Truncate;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}